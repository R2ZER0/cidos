//CiD-BIOS 
//
// Responsible for detecting and initialising all attached devices.
// Then places this data in a table (Plus functions/misc data).
// Then, load the OS. Simple.
//
//

// the MINIBIOS defintion cuts out unneccessary stuff + device initialisation, for that speedy start-up ;)
// kinda not needed since the assembly omtimisation, since the full one is way under 1k
//#define MINIBIOS

// the BUILTINKERNEL define is used if our OS kernel is compile/uploaded at the same time, to the same chip as the BIOS
//#define BUILTINKERNEL


jmp __init;

//#ifndef NULL
#define NULL 0
//#endif

#pragma set NoUnreferencedLeaves false

#include <cidbios/bios_data.txt>
#include <cidbios/extbus.txt>

__init:
    
    //make sure we are not over the size limit, else something will be corrupted
#ifndef BUILTINKERNEL
    cmp __PROGRAMSIZE__, BIOS_DATA_START;
        jge __error;
#endif
    
    
#ifndef MINIBIOS
    //reset ports
    float i;
    for(i = 0; i < 8; ++i){
         out i, 0;
    }
#endif
    
    //local vars init
    curDevPtr = BIOS_DeviceList;
    
    //place magic data
    mov #BIOS_Magic, 0xC1DB105;
    mov #BIOS_Version, BIOS_CURRENT_VERSION;
#ifndef MINIBIOS
    mov #BIOS_IdentString, _ident_str;
#else 
    mov #BIOS_IdentString, NULL;
#endif
    
    //place API
    mov #BIOS_API_Halt, biosf_api_halt;
    mov #BIOS_API_PrintStr, biosf_api_printstr;
    mov #BIOS_API_PrintInt, biosf_api_printint;
    mov #BIOS_API_PrintFloat, biosf_api_printfloat;
    
    mov #BIOS_DeviceCount, 0;
    
    //find location of our devices
    extBusOffset = 65536;
    extQuery();
    
    for(i = 0;i < EXT_MAX_DEVICES; ++i){
        BIOStestDeviceType(
            extGetDevType(i),
            extGetDevAddr(i),
            extGetDevSize(i)
        );
    }
    
    
#ifndef MINIBIOS
    BIOSinitDevices();
    
    biosf_api_printstr( _ident_str );
    biosf_api_printstr( _init_str  );
#endif

//Boot
#ifndef BUILTINKERNEL
    if(bootPoint == NULL) {
        biosf_api_printstr("Error: no kernel found!");
        biosf_api_halt();
    }
#else
    jmp _KERNEL_bootPoint;
#endif
    
    
//// END

__error:
__syshalt:
    clef;
    int 1;
    idle;
jmp __error;

//Bios API
void biosf_api_halt() {
#ifndef MINIBIOS
    biosf_api_printstr("System Halted.");
#endif
    jmp __syshalt;
}

void biosf_api_printstr(char* str){
    preserve eax, ebx; //eax = strptr, ebx = scrnptr
    cmp ttydevloc, NULL; je biosf_api_printstr_ret;
    
    mov eax, str;
    mov ebx, ttydevloc;
    mov ebx:#2038, 1;
    add ebx, 17*2*30;
    
    biosf_api_printstr_loop:
    cmp #eax, '\0'; je biosf_api_printstr_ret;
        mov #ebx, #eax;
        inc ebx; inc eax;
        mov #ebx, 999;
        inc ebx;
    jmp biosf_api_printstr_loop;
    biosf_api_printstr_ret:
}

void biosf_api_printint(char num) {
    
    
}

void biosf_api_printfloat(float num) {
    
}

#ifndef MINIBIOS
_init_str:
db 'System Initialised, booting...', 0;
_ident_str:
db 'CiDBIOS (c) 2011 Rikki Guy', 0;
#endif

// Used Functions
//TODO
// Determine the real size of devices, maybe by read-page-test

#ifndef BUILTINKERNEL
float bootPoint = NULL;
#endif
float ttydevloc = NULL;
float curDevPtr = NULL;

float BIOSputDevice(float type, float* loc, float size){
    preserve eax;
    mov eax, curDevPtr;
    mov #eax, type; inc eax;
    mov #eax, loc;  inc eax;
    mov #eax, size;
    add curDevPtr, 3;
    inc #BIOS_DeviceCount;
}

void BIOSprobeRawBuffer(float* loc, float size){
    preserve eax, ebx, ecx;
    mov eax, loc;
    cmp #eax, CIDOS_MAGIC_NUMBER;
        jne BIOSprobeRawBuffer_ret; //just ignore the device, they probably wired a barrel by accident.
    
    mov ebx, eax;
    add ebx, 2;
    mov ecx, size;
    sub ecx, 2;
    inc eax;
    
    BIOSputDevice(*eax, ebx, ecx);
    
    BIOSprobeRawBuffer_ret:
    return;
}

void BIOStestDeviceType(float type, float* loc, float size){
    if(type <= 1) return;
    idle;
    preserve eax;
    eax = type;
    cmp eax, DEVT_ADDRBUS; je testDeviceType_isRawBuffer;
    cmp eax, DEVT_CPU;     je testDeviceType_isRawBuffer;
    cmp eax, DEVT_EEPROM;  je testDeviceType_isRawBuffer;
    cmp eax, DEVT_DHDD;    je testDeviceType_isRawBuffer;
    cmp eax, DEVT_TRANSFER_BUS;    je testDeviceType_isRawBuffer;
    cmp eax, DEVT_PLUG;    je testDeviceType_isRawBuffer;
    cmp eax, DEVT_SOCKET;  je testDeviceType_isRawBuffer;
        
    if(type == DEVT_CSCREEN){
        ttydevloc = loc;
        BIOSputDevice(DEVT_CSCREEN, loc, 2048);
    }else{
        BIOSputDevice(type, loc, size);
    }
    
    return;
    
    testDeviceType_isRawBuffer:
    BIOSprobeRawBuffer(loc, size);
    return;    
}

#ifndef MINIBIOS
void BIOSinitDevice(float type, float addr, float size){
    preserve gs;
    //TODO add initialisations for other devices
    cmp type, DEVT_CSCREEN; jne initDevice_ret;
        mov gs, addr;
        mov gs:#2042, 0;
        mov gs:#2046, 0;
        mov gs:#2047, 1;
        mov gs:#2020, 1;
        mov gs:#2041, 1;
    initDevice_ret:
}

void BIOSinitDevices() {
    float n = *BIOS_DeviceCount;
    float ptr = BIOS_DeviceList;
    while(n > 0){
        
        BIOSinitDevice(ptr[0], ptr[1], ptr[2]);
        
        ptr += 3;
        --n;
    }
    
}
#endif

