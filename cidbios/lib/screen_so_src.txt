// CiDBIOS Screen Library
//offset 0;
#pragma set OutputBinaryListing true
//library header
db 0x50;
db 1; //version
db 4; //number of funcs
db __PROGRAMSIZE__;

//function table - stringptr, funcptr
db cbsdo_init_str, cbsdo_init_ext;
db cbsdo_setcol_str, cbsdo_setcol_ext;
db cbsdo_print_str, cbsdo_print_ext;
db cbsdo_printf_str, cbsdo_printf_ext;

string cbsdo_init_str, "init";
string cbsdo_setcol_str, "setcolour";
string cbsdo_print_str, "print";
string cbsdo_printf_str, "printf";

//functions for external use
cbsdo_init_ext:
out 0, 1337;
    push ds;
    mov ds, cs;
    
    cbsdo_pos = 0;
    rstack eax, esp:4;
    cbsdo_ptr = devloc = eax;
    cbsdo_ptr += 17*30*2;
    //devloc[2042] = 000;
    //devloc[2041] = 1;
    cbsdo_newline();
    
    pop ds;
retf;

cbsdo_setcol_ext:
    push ds;
    mov ds, cs;
    rstack eax, esp:4;
    cbsdo_col = eax;
    pop ds;
retf;

cbsdo_print_ext:
    push ds;
    mov ds, cs;
    
    rstack eax, esp:3;
    cbsdo_putstr(eax);
    
    pop ds;
retf;
    

char* devloc = 65536;
char* cbsdo_ptr = 0;
char cbsdo_pos = 0;
char cbsdo_col = 999;

void cbsdo_setcol(char col){
    cbsdo_col = col;
}

void cbsdo_newline(){
    cbsdo_pos = 0;
    devloc[2038] = 1;
}

void cbsdo_putchar(char c){
    if(cbsdo_pos >= 60) cbsdo_newline();
    if(c == '\n'){ cbsdo_newline(); }
    else{
        cbsdo_ptr[cbsdo_pos++] = c;
        cbsdo_ptr[cbsdo_pos++] = cbsdo_col--;
    }
}

void cbsdo_putstr(char* str){
    while(*str != '\0'){
         cbsdo_putchar(*str++);
    }
}

void cbsdo_putint(float i){ //assumes ss == ds
    
    char is_neg = 0;
    preserve eax, ebx, ecx; //eax = current number, ebx = tmp for converting to ascii, ecx = counter
    if(i < 0){
        is_neg = 1;
        neg i;
    }
    
    eax = i;
    fint eax;
        cmp eax, 0; je cbsdo_putint_zero;
        
    push '\0';
    mov ecx, 1;
    cbsdo_putint_loop:
        fint eax;
        cmp eax, 0; jle cbsdo_putint_fin;
        mov ebx, eax;
        mod ebx, 10;
        add ebx, 48; //ASCII offset
        push ebx;
        inc ecx;
        div eax, 10;
    jmp cbsdo_putint_loop;
        
        
    cbsdo_putint_zero:
        cbsdo_putchar('0');
        return;
    
    cbsdo_putint_fin:
        if(is_neg==1){ push '-'; }
        cbsdo_putstr(esp+1);
        add esp, ecx; //reset stack
        return;
}

void cbsdo_putfloat(float i, float decplc) { 
    float frac = i;
    ffrac frac;
    while(decplc-- > 0){
        frac *= 10;
    }
    cbsdo_putint(i);
    cbsdo_putchar('.');
    if(frac < 0){ neg frac; }
    cbsdo_putint(frac);
}



cbsdo_printf_ext:
    push ds;
    mov ds, cs;
    
    enter 0;
    rstack r0, ebp:1;
    mov r2, 3; //offset from ebp
    
    @cbsdo_printf_loop:
        mov r1, #r0; inc r0;
        cmp r1, '\0'; jle @cbsdo_printf_fin;
        cmp r1, '%'; je @cbsdo_printf_ctrl;
        push r1;
        call cbsdo_putchar;
        inc esp;
        //cbsdo_putchar(r1);
    jmp @cbsdo_printf_loop;
    
    @cbsdo_printf_ctrl:
        mov r1, #r0; inc r0;
        cmp r1, 's'; je @cbsdo_printf_pstr;
        cmp r1, 'd'; je @cbsdo_printf_pint;
        cmp r1, 'f'; je @cbsdo_printf_pflt;
        push '%';
        call cbsdo_putchar;
        inc esp;
        //cbsdo_putchar('%');
    jmp @cbsdo_printf_loop;
    
    @cbsdo_printf_pstr:
        rstack r1, ebp:r2; inc r2;
        //push r1;
        //call cbsdo_putstr;
        //inc esp;
        cbsdo_putstr(r1);
    jmp @cbsdo_printf_loop;
    
    @cbsdo_printf_pint:
        rstack r1, ebp:r2; inc r2;
        //push r1;
        //call cbsdo_putstr;
        //inc esp;
        cbsdo_putint(r1);
    jmp @cbsdo_printf_loop;
    
    @cbsdo_printf_pflt:
        mov r1, #r0; inc r0;
        sub r1, 48; //convert from ascii
        push r1;
        rstack r1, ebp:r2; inc r2;
        push r1;
        call cbsdo_putfloat;
        add esp, 2;
    jmp @cbsdo_printf_loop;
    
    @cbsdo_printf_fin:
    leave;
    pop ds;
retf;
